apiVersion: v1
kind: ConfigMap
metadata:
  name: adguard-home-scripts
data:
  backup-config.sh: |
    #!/bin/sh
    # Script to backup AdGuard Home configuration via API and push to git
    set -e

    # Create temporary directory
    TEMP_DIR="/tmp/adguard-backup-$(date +%s)"
    mkdir -p $TEMP_DIR
    cd $TEMP_DIR

    # Wait for AdGuard Home to be ready
    until curl -s http://adguard-home.adguard-home.svc.cluster.local/control/status > /dev/null; do
      echo "Waiting for AdGuard Home to be ready..."
      sleep 5
    done

    # Authenticate with AdGuard Home API
    echo "Authenticating with AdGuard Home..."
    SESSION_COOKIE=$(curl -s -X POST \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"admin\",\"password\":\"$ADMIN_PASSWORD\"}" \
      -c - \
      http://adguard-home.adguard-home.svc.cluster.local/control/login | grep -o 'admin_session[^;]*' | cut -d' ' -f2)

    # Get current configuration from various API endpoints
    echo "Backing up AdGuard Home configuration..."

    # Get general status
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/status > status.json

    # Get DNS configuration
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/dns_info > dns_config.json

    # Get filtering status
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/filtering/status > filtering_status.json

    # Get DHCP status
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/dhcp/status > dhcp_status.json

    # Get statistics configuration
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/stats/config > stats_config.json

    # Get query log configuration
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/querylog/config > querylog_config.json

    # Get TLS configuration
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/tls/status > tls_status.json

    # Get clients
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/clients > clients.json

    # Get rewrite rules
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/rewrite/list > rewrite_list.json

    # Combine all configuration into one JSON file
    echo "Combining configuration..."
    echo "{}" > config.json
    jq -s add config.json status.json > combined.json && mv combined.json config.json
    jq -s add config.json dns_config.json > combined.json && mv combined.json config.json
    jq -s add config.json filtering_status.json > combined.json && mv combined.json config.json
    jq -s add config.json dhcp_status.json > combined.json && mv combined.json config.json
    jq -s add config.json stats_config.json > combined.json && mv combined.json config.json
    jq -s add config.json querylog_config.json > combined.json && mv combined.json config.json
    jq -s add config.json tls_status.json > combined.json && mv combined.json config.json
    jq -s add config.json clients.json > combined.json && mv combined.json config.json
    jq -s add config.json rewrite_list.json > combined.json && mv combined.json config.json

    # Remove sensitive information (password hashes) before saving
    jq 'del(.users[].password)' config.json > config-sanitized.json

    # Create a temporary git repository
    echo "Creating temporary git repository..."
    mkdir repo
    cd repo
    git init
    git config user.name "$GIT_USERNAME"
    git config user.email "$GIT_EMAIL"

    # Get the current file from the repository (if it exists)
    echo "Fetching current configuration file from repository..."
    mkdir -p "$(dirname "$CONFIG_FILE_PATH")"
    curl -s -u "$GIT_USERNAME:$GIT_TOKEN" -o "$CONFIG_FILE_PATH.tmp" \
      "https://raw.githubusercontent.com/${GIT_REPO#https://github.com/}/$GIT_BRANCH/$CONFIG_FILE_PATH" || true

    # Check if the file exists and is different
    if [ -f "$CONFIG_FILE_PATH.tmp" ]; then
      echo "Existing configuration file found, comparing..."
      # Format both files for comparison
      jq --sort-keys '.' config-sanitized.json > config.new.json
      jq --sort-keys '.' "$CONFIG_FILE_PATH.tmp" > config.old.json
      
      if ! cmp -s config.new.json config.old.json; then
        echo "Configuration has changed, updating..."
        # Copy the sanitized configuration (JSON format)
        cp config-sanitized.json "$CONFIG_FILE_PATH"
        
        # Commit and push changes
        git add "$CONFIG_FILE_PATH"
        git commit -m "Update AdGuard Home configuration $(date)"
        
        # Push changes using the token
        git push https://${GIT_USERNAME}:${GIT_TOKEN}@${GIT_REPO#https://} $GIT_BRANCH
        
        echo "Configuration backup completed and pushed to git"
      else
        echo "Configuration unchanged, no commit needed"
      fi
    else
      echo "Configuration file does not exist in repository, creating..."
      # Create directory structure and copy the sanitized configuration
      mkdir -p "$(dirname "$CONFIG_FILE_PATH")"
      cp config-sanitized.json "$CONFIG_FILE_PATH"
      
      # Commit and push changes
      git add "$CONFIG_FILE_PATH"
      git commit -m "Update AdGuard Home configuration $(date)"
      
      # Push changes using the token
      git push https://${GIT_USERNAME}:${GIT_TOKEN}@${GIT_REPO#https://} $GIT_BRANCH
      
      echo "Configuration backup completed and pushed to git"
    fi

    # Clean up
    cd /
    rm -rf $TEMP_DIR

  apply-config.sh: |
    #!/bin/sh
    # Script to apply configuration to AdGuard Home via API from git
    set -e

    # Create temporary directory
    TEMP_DIR="/tmp/adguard-apply-$(date +%s)"
    mkdir -p $TEMP_DIR
    cd $TEMP_DIR

    # Wait for AdGuard Home to be ready
    until curl -s http://adguard-home.adguard-home.svc.cluster.local/control/status > /dev/null; do
      echo "Waiting for AdGuard Home to be ready..."
      sleep 5
    done

    # Authenticate with AdGuard Home API
    echo "Authenticating with AdGuard Home..."
    SESSION_COOKIE=$(curl -s -X POST \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"admin\",\"password\":\"$ADMIN_PASSWORD\"}" \
      -c - \
      http://adguard-home.adguard-home.svc.cluster.local/control/login | grep -o 'admin_session[^;]*' | cut -d' ' -f2)

    # Download the configuration file from the repository
    echo "Downloading configuration file from repository..."
    mkdir -p "$(dirname "$CONFIG_FILE_PATH")"
    curl -s -u "$GIT_USERNAME:$GIT_TOKEN" -o "$CONFIG_FILE_PATH" \
      "https://raw.githubusercontent.com/${GIT_REPO#https://github.com/}/$GIT_BRANCH/$CONFIG_FILE_PATH"

    # Check if configuration file was downloaded successfully
    if [ ! -f "$CONFIG_FILE_PATH" ]; then
      echo "Failed to download configuration file"
      exit 1
    fi

    # Apply configuration via API (this is a simplified version - in practice, you'd need to apply each section separately)
    echo "Applying AdGuard Home configuration..."
    echo "Note: This script needs to be expanded to apply each configuration section separately."
    echo "For now, we're just showing how it would work."

    # Clean up
    cd /
    rm -rf $TEMP_DIR