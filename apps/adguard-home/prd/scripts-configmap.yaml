apiVersion: v1
kind: ConfigMap
metadata:
  name: adguard-home-scripts
data:
  backup-config.sh: |
    #!/bin/sh
    # Script to backup AdGuard Home configuration via API and push to git
    set -e

    # Configuration
    CONFIG_DIR="config"

    # Create temporary directory
    TEMP_DIR="/tmp/adguard-backup-$(date +%s)"
    mkdir -p $TEMP_DIR
    cd $TEMP_DIR

    # Wait for AdGuard Home to be ready
    until curl -s http://adguard-home.adguard-home.svc.cluster.local/control/status > /dev/null; do
      echo "Waiting for AdGuard Home to be ready..."
      sleep 5
    done

    # Authenticate with AdGuard Home API
    echo "Authenticating with AdGuard Home..."
    SESSION_COOKIE=$(curl -s -X POST \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"admin\",\"password\":\"$ADMIN_PASSWORD\"}" \
      -c - \
      http://adguard-home.adguard-home.svc.cluster.local/control/login | grep -o 'admin_session[^;]*' | cut -d' ' -f2)

    # Create config directory
    mkdir -p $CONFIG_DIR

    # Get current configuration from various API endpoints
    echo "Backing up AdGuard Home configuration..."

    # Get general status
    echo "Backing up status..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/status > $CONFIG_DIR/status.json

    # Get DNS configuration
    echo "Backing up DNS configuration..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/dns_info > $CONFIG_DIR/dns_config.json

    # Get filtering status
    echo "Backing up filtering status..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/filtering/status > $CONFIG_DIR/filtering_status.json

    # Get DHCP status
    echo "Backing up DHCP status..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/dhcp/status > $CONFIG_DIR/dhcp_status.json

    # Get statistics configuration
    echo "Backing up statistics configuration..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/stats/config > $CONFIG_DIR/stats_config.json

    # Get query log configuration
    echo "Backing up query log configuration..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/querylog/config > $CONFIG_DIR/querylog_config.json

    # Get TLS configuration
    echo "Backing up TLS configuration..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/tls/status > $CONFIG_DIR/tls_status.json

    # Get clients
    echo "Backing up clients..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/clients > $CONFIG_DIR/clients.json

    # Get rewrite rules
    echo "Backing up rewrite rules..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/rewrite/list > $CONFIG_DIR/rewrite_list.json

    # Get blocked services
    echo "Backing up blocked services..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/blocked_services/get > $CONFIG_DIR/blocked_services.json

    # Get access list
    echo "Backing up access list..."
    curl -s -H "Cookie: admin_session=$SESSION_COOKIE" \
      http://adguard-home.adguard-home.svc.cluster.local/control/access/list > $CONFIG_DIR/access_list.json

    # Create a temporary git repository
    echo "Creating temporary git repository..."
    mkdir repo
    cd repo
    git init
    git config user.name "$GIT_USERNAME"
    git config user.email "$GIT_EMAIL"

    # Clone the repository
    echo "Cloning repository..."
    git clone https://${GIT_USERNAME}:${GIT_TOKEN}@${GIT_REPO#https://} .

    # Copy configuration files
    echo "Copying configuration files..."
    mkdir -p "$CONFIG_FILE_PATH"
    cp -r ../$CONFIG_DIR/* "$CONFIG_FILE_PATH/"

    # Check if there are changes
    if ! git diff --quiet "$CONFIG_FILE_PATH"; then
      echo "Configuration has changed, committing..."
      
      # Add and commit changes
      git add "$CONFIG_FILE_PATH"
      git commit -m "Update AdGuard Home configuration $(date)"
      
      # Push changes
      git push origin $GIT_BRANCH
      
      echo "Configuration backup completed and pushed to git"
    else
      echo "Configuration unchanged, no commit needed"
    fi

    # Clean up
    cd /
    rm -rf $TEMP_DIR

  apply-config.sh: |
    #!/bin/sh
    # Script to apply configuration to AdGuard Home via API from git
    set -e

    # Configuration
    CONFIG_DIR="config"

    # Create temporary directory
    TEMP_DIR="/tmp/adguard-apply-$(date +%s)"
    mkdir -p $TEMP_DIR
    cd $TEMP_DIR

    # Wait for AdGuard Home to be ready
    until curl -s http://adguard-home.adguard-home.svc.cluster.local/control/status > /dev/null; do
      echo "Waiting for AdGuard Home to be ready..."
      sleep 5
    done

    # Authenticate with AdGuard Home API
    echo "Authenticating with AdGuard Home..."
    SESSION_COOKIE=$(curl -s -X POST \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"admin\",\"password\":\"$ADMIN_PASSWORD\"}" \
      -c - \
      http://adguard-home.adguard-home.svc.cluster.local/control/login | grep -o 'admin_session[^;]*' | cut -d' ' -f2)

    # Clone the repository
    echo "Cloning repository..."
    git clone https://${GIT_USERNAME}:${GIT_TOKEN}@${GIT_REPO#https://} repo
    cd repo

    # Checkout the specified branch
    git checkout $GIT_BRANCH

    # Check if configuration directory exists
    if [ ! -d "$CONFIG_FILE_PATH" ]; then
      echo "Configuration directory not found: $CONFIG_FILE_PATH"
      exit 1
    fi

    # Apply configuration via API
    echo "Applying AdGuard Home configuration..."

    # Apply DNS configuration
    if [ -f "$CONFIG_FILE_PATH/dns_config.json" ]; then
      echo "Applying DNS configuration..."
      curl -X POST \
        -H "Cookie: admin_session=$SESSION_COOKIE" \
        -H "Content-Type: application/json" \
        -d @"$CONFIG_FILE_PATH/dns_config.json" \
        http://adguard-home.adguard-home.svc.cluster.local/control/dns_config
    fi

    # Apply filtering configuration
    if [ -f "$CONFIG_FILE_PATH/filtering_status.json" ]; then
      echo "Applying filtering configuration..."
      curl -X POST \
        -H "Cookie: admin_session=$SESSION_COOKIE" \
        -H "Content-Type: application/json" \
        -d @"$CONFIG_FILE_PATH/filtering_status.json" \
        http://adguard-home.adguard-home.svc.cluster.local/control/filtering/config
    fi

    # Apply statistics configuration
    if [ -f "$CONFIG_FILE_PATH/stats_config.json" ]; then
      echo "Applying statistics configuration..."
      curl -X PUT \
        -H "Cookie: admin_session=$SESSION_COOKIE" \
        -H "Content-Type: application/json" \
        -d @"$CONFIG_FILE_PATH/stats_config.json" \
        http://adguard-home.adguard-home.svc.cluster.local/control/stats/config/update
    fi

    # Apply query log configuration
    if [ -f "$CONFIG_FILE_PATH/querylog_config.json" ]; then
      echo "Applying query log configuration..."
      curl -X PUT \
        -H "Cookie: admin_session=$SESSION_COOKIE" \
        -H "Content-Type: application/json" \
        -d @"$CONFIG_FILE_PATH/querylog_config.json" \
        http://adguard-home.adguard-home.svc.cluster.local/control/querylog/config/update
    fi

    echo "Configuration applied successfully"

    # Clean up
    cd /
    rm -rf $TEMP_DIR